// Code generated by Icestudio 0.5.1-nightly
// Thu, 06 Feb 2020 04:32:39 GMT

`default_nettype none

module main #(
 parameter v063c41 = 10,
 parameter v8c39ad = 128,
 parameter v64f1bf = 10,
 parameter vc0d6da = 0,
 parameter vecdf4b = 1,
 parameter v12662d = 100000
) (
 input v9a16df,
 input vd1db3c,
 input vcc028c,
 input vfaf248,
 input vclk,
 output v5d042c,
 output vdcba68,
 output v34237c,
 output ve47510
);
 localparam p4 = v8c39ad;
 localparam p7 = v64f1bf;
 localparam p14 = v063c41;
 localparam p18 = vc0d6da;
 localparam p19 = vecdf4b;
 localparam p28 = v12662d;
 wire w0;
 wire w1;
 wire w2;
 wire [0:7] w3;
 wire w5;
 wire w6;
 wire w8;
 wire w9;
 wire [0:1] w10;
 wire w11;
 wire w12;
 wire w13;
 wire w15;
 wire w16;
 wire w17;
 wire [0:7] w20;
 wire w21;
 wire w22;
 wire w23;
 wire w24;
 wire [0:7] w25;
 wire [0:7] w26;
 wire w27;
 wire w29;
 wire w30;
 wire w31;
 wire w32;
 wire w33;
 wire w34;
 wire w35;
 wire w36;
 wire w37;
 wire [0:7] w38;
 wire w39;
 wire w40;
 wire w41;
 wire w42;
 wire w43;
 wire w44;
 wire w45;
 wire w46;
 wire w47;
 wire w48;
 wire w49;
 wire w50;
 wire w51;
 wire w52;
 wire w53;
 assign w0 = vd1db3c;
 assign w1 = v9a16df;
 assign v5d042c = w2;
 assign vdcba68 = w11;
 assign v34237c = w12;
 assign w22 = vcc028c;
 assign ve47510 = w23;
 assign w24 = vfaf248;
 assign w32 = vclk;
 assign w33 = vclk;
 assign w34 = vclk;
 assign w35 = vclk;
 assign w36 = vclk;
 assign w37 = vclk;
 assign w33 = w32;
 assign w34 = w32;
 assign w34 = w33;
 assign w35 = w32;
 assign w35 = w33;
 assign w35 = w34;
 assign w36 = w32;
 assign w36 = w33;
 assign w36 = w34;
 assign w36 = w35;
 assign w37 = w32;
 assign w37 = w33;
 assign w37 = w34;
 assign w37 = w35;
 assign w37 = w36;
 assign w39 = w16;
 assign w41 = w40;
 assign w43 = w42;
 assign w45 = w44;
 v5d13fa veedcef (
  .v817c2f(w0),
  .v31cdf6(w1),
  .v425d4f(w2),
  .v97ccb8(w3),
  .v3ea718(w13),
  .ve95ec3(w32),
  .v6f741b(w38)
 );
 vca7316 #(
  .v6b316b(p4)
 ) v1e6e43 (
  .v40cb98(w3),
  .v18e78c(w5)
 );
 vb2090f va8c25c (
  .v0e28cb(w5),
  .v3ca442(w6),
  .vcbab45(w8)
 );
 v725b7e v2cd319 (
  .v9fb85f(w6)
 );
 va9a5bc #(
  .vfb06ae(p7)
 ) v8f83ef (
  .v2a8434(w9),
  .vac0eb2(w33)
 );
 v2d2866 v3b9829 (
  .vf24dba(w38),
  .v50d6c6(w39)
 );
 v42ebf7 v053a4d (
  .vf54559(w8),
  .v9afc1f(w9),
  .ve8318d(w16)
 );
 v42ebf7 vad578e (
  .ve8318d(w11),
  .v9afc1f(w15)
 );
 v2254c0 #(
  .vdd0290(p18),
  .vc96add(p19)
 ) ve21ecc (
  .ve54597(w10),
  .vd47d8c(w21),
  .vfdbd5b(w34)
 );
 vfc9dac vafdd7a (
  .v8b19dd(w10),
  .v64d863(w12),
  .v3f8943(w17)
 );
 vebfed3 #(
  .vfb06ae(p14)
 ) vebde01 (
  .v2a8434(w13),
  .vac0eb2(w35)
 );
 v35f267 vbe7b2e (
  .vcbab45(w15),
  .v0e28cb(w16)
 );
 v1b13f6 vcd087d (
  .vaf813b(w17),
  .v3e92e2(w20),
  .vcce693(w25),
  .vd73620(w26)
 );
 v5d13fa v9f9872 (
  .v97ccb8(w20),
  .v3b3009(w21),
  .v31cdf6(w22),
  .v425d4f(w23),
  .v817c2f(w24),
  .v3ea718(w27),
  .ve95ec3(w36)
 );
 vbc6704 v0e56ed (
  .v595263(w25),
  .vc85478(w46),
  .ve0c1b4(w47),
  .v2c9812(w48),
  .v7ada3f(w49),
  .v8f149e(w50),
  .vb85197(w51),
  .v7c37b3(w52),
  .v45ab8c(w53)
 );
 vbc6704 v5e06b7 (
  .v595263(w26),
  .v45ab8c(w40),
  .vb85197(w42),
  .v8f149e(w44)
 );
 v7263b9 ve62a49 (
  .ve5ee9d(w30),
  .v21d803(w40),
  .v858373(w42),
  .v7fcaae(w44),
  .v1b2099(w46),
  .v737e15(w47),
  .vf0dd0a(w48),
  .v15c355(w49)
 );
 v7263b9 vb0678c (
  .ve5ee9d(w31),
  .v21d803(w41),
  .v858373(w43),
  .v7fcaae(w45),
  .v15c355(w50),
  .vf0dd0a(w51),
  .v1b2099(w52),
  .v737e15(w53)
 );
 v725b7e vf7c7fc (
  .v9fb85f(w31)
 );
 v21cfcc v58a7f3 (
  .v9fb85f(w30)
 );
 v50d67c #(
  .v88c17a(p28)
 ) v59f9fe (
  .v9b7dfc(w27),
  .vfbc29f(w29),
  .v20c30d(w37)
 );
 v725b7e v018796 (
  .v9fb85f(w29)
 );
endmodule

module v5d13fa (
 input ve95ec3,
 input v31cdf6,
 input v817c2f,
 input v6ed3a5,
 input [7:0] v6f741b,
 input v3ea718,
 output v425d4f,
 output vad23b3,
 output [7:0] v97ccb8,
 output v3b3009
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:7] w5;
 wire w6;
 wire w7;
 wire [0:7] w8;
 wire [0:7] w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire [0:7] w21;
 wire w22;
 wire w23;
 wire w24;
 wire w25;
 wire w26;
 wire w27;
 wire w28;
 wire w29;
 wire w30;
 wire w31;
 wire w32;
 wire w33;
 wire w34;
 wire w35;
 wire w36;
 wire w37;
 wire w38;
 wire w39;
 wire w40;
 wire w41;
 wire w42;
 wire w43;
 assign w0 = v6ed3a5;
 assign w1 = v817c2f;
 assign w2 = v31cdf6;
 assign v97ccb8 = w8;
 assign v3b3009 = w10;
 assign w13 = ve95ec3;
 assign w14 = ve95ec3;
 assign w15 = ve95ec3;
 assign w16 = ve95ec3;
 assign w20 = v3ea718;
 assign w21 = v6f741b;
 assign v425d4f = w24;
 assign w25 = ve95ec3;
 assign w26 = ve95ec3;
 assign w27 = ve95ec3;
 assign w28 = ve95ec3;
 assign w29 = ve95ec3;
 assign w30 = ve95ec3;
 assign w31 = ve95ec3;
 assign w32 = ve95ec3;
 assign w33 = ve95ec3;
 assign vad23b3 = w39;
 assign w7 = w6;
 assign w14 = w13;
 assign w15 = w13;
 assign w15 = w14;
 assign w16 = w13;
 assign w16 = w14;
 assign w16 = w15;
 assign w25 = w13;
 assign w25 = w14;
 assign w25 = w15;
 assign w25 = w16;
 assign w26 = w13;
 assign w26 = w14;
 assign w26 = w15;
 assign w26 = w16;
 assign w26 = w25;
 assign w27 = w13;
 assign w27 = w14;
 assign w27 = w15;
 assign w27 = w16;
 assign w27 = w25;
 assign w27 = w26;
 assign w28 = w13;
 assign w28 = w14;
 assign w28 = w15;
 assign w28 = w16;
 assign w28 = w25;
 assign w28 = w26;
 assign w28 = w27;
 assign w29 = w13;
 assign w29 = w14;
 assign w29 = w15;
 assign w29 = w16;
 assign w29 = w25;
 assign w29 = w26;
 assign w29 = w27;
 assign w29 = w28;
 assign w30 = w13;
 assign w30 = w14;
 assign w30 = w15;
 assign w30 = w16;
 assign w30 = w25;
 assign w30 = w26;
 assign w30 = w27;
 assign w30 = w28;
 assign w30 = w29;
 assign w31 = w13;
 assign w31 = w14;
 assign w31 = w15;
 assign w31 = w16;
 assign w31 = w25;
 assign w31 = w26;
 assign w31 = w27;
 assign w31 = w28;
 assign w31 = w29;
 assign w31 = w30;
 assign w32 = w13;
 assign w32 = w14;
 assign w32 = w15;
 assign w32 = w16;
 assign w32 = w25;
 assign w32 = w26;
 assign w32 = w27;
 assign w32 = w28;
 assign w32 = w29;
 assign w32 = w30;
 assign w32 = w31;
 assign w33 = w13;
 assign w33 = w14;
 assign w33 = w15;
 assign w33 = w16;
 assign w33 = w25;
 assign w33 = w26;
 assign w33 = w27;
 assign w33 = w28;
 assign w33 = w29;
 assign w33 = w30;
 assign w33 = w31;
 assign w33 = w32;
 assign w36 = w35;
 assign w37 = w35;
 assign w37 = w36;
 assign w38 = w4;
 assign w39 = w11;
 assign w40 = w11;
 assign w40 = w39;
 assign w41 = w11;
 assign w41 = w39;
 assign w41 = w40;
 assign w43 = w10;
 v3bfe20 vfdfcf6 (
  .ve7f5e6(w0),
  .v3c12b5(w11),
  .v717e81(w15)
 );
 v3bfe20 v8f5990 (
  .ve7f5e6(w1),
  .v3c12b5(w12),
  .v717e81(w14)
 );
 v3bfe20 ve3fbb1 (
  .ve7f5e6(w2),
  .v717e81(w13),
  .v3c12b5(w34)
 );
 v56e0da v2e9a92 (
  .vd50ef8(w5),
  .v54c0b0(w27),
  .v4fef26(w34),
  .v8fcf35(w35)
 );
 v8e2728 v867237 (
  .v2dffca(w3),
  .v10eedb(w12),
  .v0884a0(w16)
 );
 vb2090f v90dae1 (
  .v0e28cb(w3),
  .v3ca442(w4),
  .vcbab45(w35)
 );
 v35f267 vcab8a4 (
  .vcbab45(w4),
  .v0e28cb(w11)
 );
 v89d234 ve8c9fd (
  .v39f831(w5),
  .vf892a0(w6),
  .vb1c024(w8),
  .v41eb95(w28)
 );
 v117a33 v4e6999 (
  .v712cd1(w6),
  .vdd729a(w31),
  .v7c533e(w37),
  .ve61673(w40)
 );
 v1c7dae ve81961 (
  .vf54559(w7),
  .ve8318d(w10),
  .va4102a(w32)
 );
 v53847c v08b511 (
  .v67ccbf(w9),
  .v3ba3e6(w17),
  .v9bfaa9(w19),
  .v4a6801(w25),
  .v7d29fb(w36),
  .v0d3330(w42)
 );
 v89d234 vab60d7 (
  .vb1c024(w9),
  .vf892a0(w20),
  .v39f831(w21),
  .v41eb95(w26)
 );
 v21cfcc vc635f5 (
  .v9fb85f(w17)
 );
 v7eacdf vb97edc (
  .v2dffca(w18),
  .v0884a0(w29),
  .v10eedb(w41)
 );
 v816138 v6e906f (
  .v0e28cb(w18),
  .vcbab45(w19),
  .v3ca442(w23)
 );
 v1c7dae v2fff92 (
  .ve8318d(w22),
  .va4102a(w30),
  .vf54559(w43)
 );
 v529da2 v7aa20c (
  .vf54559(w22),
  .ve8318d(w23),
  .va4102a(w33)
 );
 vd7e6ff v30306b (
  .v341fc3(w24),
  .v248807(w38),
  .vba979e(w42)
 );
endmodule

module v3bfe20 (
 input v717e81,
 input ve7f5e6,
 output v3c12b5
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = ve7f5e6;
 assign w1 = v717e81;
 assign v3c12b5 = w2;
 v3bfe20_v683a9f v683a9f (
  .i(w0),
  .clk(w1),
  .o(w2)
 );
endmodule

module v3bfe20_v683a9f (
 input clk,
 input i,
 output o
);
 // Sincronizacion. Evitar 
 // problema de la metaestabilidad
 
 reg d1;
 reg d2;
 
 always @(posedge clk)
  d1 <= i;
  
 always @(posedge clk)
   d2 <= d1;
   
 assign o = d2;
endmodule

module v56e0da #(
 parameter v27bfca = 0
) (
 input v54c0b0,
 input v4fef26,
 input v8fcf35,
 output v0d3330,
 output [7:0] vd50ef8
);
 localparam p0 = v27bfca;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:7] w5;
 assign v0d3330 = w1;
 assign w2 = v4fef26;
 assign w3 = v8fcf35;
 assign w4 = v54c0b0;
 assign vd50ef8 = w5;
 v56e0da_v56d51d #(
  .INI(p0)
 ) v56d51d (
  .so(w1),
  .si(w2),
  .shift(w3),
  .clk(w4),
  .q(w5)
 );
endmodule

module v56e0da_v56d51d #(
 parameter INI = 0
) (
 input clk,
 input si,
 input shift,
 output so,
 output [7:0] q
);
 //-- Numero de bits el registros de desplazamiento
 localparam N = 8;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (shift)
     q <= {q[N-2:0], si};
     
 //-- Sacar el bit de mayor peso por serial-out    
 assign so = q[N-1];
endmodule

module v8e2728 (
 input v0884a0,
 input v10eedb,
 output v2dffca
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v10eedb;
 assign v2dffca = w1;
 assign w2 = v0884a0;
 v8e2728_v115ffb v115ffb (
  .i(w0),
  .o(w1),
  .clk(w2)
 );
endmodule

module v8e2728_v115ffb (
 input clk,
 input i,
 output o
);
 reg q = 0;
 
 always @(posedge clk)
   q <= i;
   
 assign o = (~q & i);  
endmodule

module vb2090f (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vb2090f_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

module vb2090f_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta AND
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a & b;
 
 //-- endmodule
endmodule

module v35f267 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v35f267_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

module v35f267_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule

module v89d234 #(
 parameter v422d28 = 0
) (
 input v41eb95,
 input [7:0] v39f831,
 input vf892a0,
 output [7:0] vb1c024
);
 localparam p0 = v422d28;
 wire [0:7] w1;
 wire [0:7] w2;
 wire w3;
 wire w4;
 assign vb1c024 = w1;
 assign w2 = v39f831;
 assign w3 = vf892a0;
 assign w4 = v41eb95;
 v89d234_v9148cb #(
  .INI(p0)
 ) v9148cb (
  .q(w1),
  .d(w2),
  .load(w3),
  .clk(w4)
 );
endmodule

module v89d234_v9148cb #(
 parameter INI = 0
) (
 input clk,
 input [7:0] d,
 input load,
 output [7:0] q
);
 localparam N = 8;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (load)
     q <= d;
endmodule

module v117a33 #(
 parameter v5e4a03 = 8
) (
 input vdd729a,
 input ve61673,
 input v7c533e,
 output [2:0] vf4a676,
 output v712cd1
);
 localparam p1 = v5e4a03;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire [0:2] w5;
 assign w0 = ve61673;
 assign w2 = v7c533e;
 assign w3 = vdd729a;
 assign v712cd1 = w4;
 assign vf4a676 = w5;
 v117a33_vbd6086 #(
  .M(p1)
 ) vbd6086 (
  .rst(w0),
  .cnt(w2),
  .clk(w3),
  .ov(w4),
  .q(w5)
 );
endmodule

module v117a33_vbd6086 #(
 parameter M = 0
) (
 input clk,
 input rst,
 input cnt,
 output [2:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 3; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)
     qi <= 2'b00;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == M);
     
endmodule

module v1c7dae #(
 parameter v71e305 = 0
) (
 input va4102a,
 input vf54559,
 output ve8318d
);
 localparam p2 = v71e305;
 wire w0;
 wire w1;
 wire w3;
 assign w0 = va4102a;
 assign ve8318d = w1;
 assign w3 = vf54559;
 v1c7dae_vb8adf8 #(
  .INI(p2)
 ) vb8adf8 (
  .clk(w0),
  .q(w1),
  .d(w3)
 );
endmodule

module v1c7dae_vb8adf8 #(
 parameter INI = 0
) (
 input clk,
 input d,
 output q
);
 reg q = INI;
 always @(posedge clk)
   q <= d;
endmodule

module v53847c #(
 parameter vc96e81 = 0
) (
 input v4a6801,
 input v3ba3e6,
 input [7:0] v67ccbf,
 input v9bfaa9,
 input v7d29fb,
 output v0d3330,
 output [7:0] vd50ef8
);
 localparam p0 = vc96e81;
 wire [0:7] w1;
 wire w2;
 wire w3;
 wire [0:7] w4;
 wire w5;
 wire w6;
 wire w7;
 assign vd50ef8 = w1;
 assign w2 = v4a6801;
 assign w3 = v3ba3e6;
 assign w4 = v67ccbf;
 assign w5 = v7d29fb;
 assign w6 = v9bfaa9;
 assign v0d3330 = w7;
 v53847c_v768248 #(
  .INI(p0)
 ) v768248 (
  .q(w1),
  .clk(w2),
  .si(w3),
  .d(w4),
  .shift(w5),
  .load(w6),
  .so(w7)
 );
endmodule

module v53847c_v768248 #(
 parameter INI = 0
) (
 input clk,
 input si,
 input [7:0] d,
 input load,
 input shift,
 output so,
 output [7:0] q
);
 //-- Numero de bits el registros de desplazamiento
 localparam N = 8;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (load)
     q <= d;
   else if (shift)
     q <= {q[N-2:0], si};
     
 //-- Sacar el bit de mayor peso por serial-out    
 assign so = q[N-1];
endmodule

module v21cfcc (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 v21cfcc_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

module v21cfcc_vb2eccd (
 output q
);
 //-- Bit constante a 0
 assign q = 1'b0;
 
 
endmodule

module v7eacdf (
 input v0884a0,
 input v10eedb,
 output v2dffca
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v10eedb;
 assign v2dffca = w1;
 assign w2 = v0884a0;
 v7eacdf_v115ffb v115ffb (
  .i(w0),
  .o(w1),
  .clk(w2)
 );
endmodule

module v7eacdf_v115ffb (
 input clk,
 input i,
 output o
);
 reg q = 0;
 
 always @(posedge clk)
   q <= i;
   
 assign o = (q & ~i);  
endmodule

module v816138 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v816138_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

module v816138_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta OR
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a | b;
 
 //-- endmodule
endmodule

module v529da2 #(
 parameter v71e305 = 0,
 parameter v793838 = 0
) (
 input va4102a,
 input vf54559,
 output ve8318d
);
 localparam p3 = v71e305;
 localparam p4 = v793838;
 wire w0;
 wire w1;
 wire w2;
 assign w0 = va4102a;
 assign ve8318d = w1;
 assign w2 = vf54559;
 v529da2_vb8adf8 #(
  .INI0(p3),
  .INI1(p4)
 ) vb8adf8 (
  .clk(w0),
  .q(w1),
  .d(w2)
 );
endmodule

module v529da2_vb8adf8 #(
 parameter INI0 = 0,
 parameter INI1 = 0
) (
 input clk,
 input d,
 output q
);
 reg q0 = INI0;
 reg q1 = INI1;
 always @(posedge clk)
   q0 <= d;
   
 always @(posedge clk)
   q1 <= q0;
 
 //-- Salida  
 assign q = q1;  
endmodule

module vd7e6ff (
 input v248807,
 input vba979e,
 output v341fc3,
 output v790e82
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = v248807;
 assign w1 = vba979e;
 assign v790e82 = w2;
 assign v341fc3 = w3;
 vd7e6ff_v43ad2d v43ad2d (
  .oe(w0),
  .dout(w1),
  .din(w2),
  .pin(w3)
 );
endmodule

module vd7e6ff_v43ad2d (
 input oe,
 input dout,
 output pin,
 output din
);
   SB_IO #(
       .PIN_TYPE(6'b1010_01),
       .PULLUP(1'b0)
   ) triState (
       .PACKAGE_PIN(pin),
       .OUTPUT_ENABLE(oe),
       .D_OUT_0(dout),
       .D_IN_0(din)
   );
endmodule

module vca7316 #(
 parameter v6b316b = 0
) (
 input [7:0] v40cb98,
 output v18e78c
);
 localparam p1 = v6b316b;
 wire w0;
 wire [0:7] w2;
 assign v18e78c = w0;
 assign w2 = v40cb98;
 vca7316_vd75681 #(
  .K(p1)
 ) vd75681 (
  .eq(w0),
  .a(w2)
 );
endmodule

module vca7316_vd75681 #(
 parameter K = 0
) (
 input [7:0] a,
 output eq
);
 assign eq = (a == K);
endmodule

module v725b7e (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 v725b7e_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

module v725b7e_vb2eccd (
 output q
);
 //-- Bit constante a 1
 assign q = 1'b1;
 
 
endmodule

module va9a5bc #(
 parameter vfb06ae = 1
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 va9a5bc_v6cac2f #(
  .SEC(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

module va9a5bc_v6cac2f #(
 parameter SEC = 0
) (
 input clk,
 output o
);
 //localparam SEC;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000*SEC;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la señal de overflow
 assign o = reset;
 
 
 
 
endmodule

module v2d2866 (
 input [7:0] vd6b984,
 input [7:0] v02d898,
 input v50d6c6,
 output [7:0] vf24dba
);
 wire w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:7] w3;
 assign w0 = v50d6c6;
 assign w1 = vd6b984;
 assign w2 = v02d898;
 assign vf24dba = w3;
 v2d2866_ve4e0df ve4e0df (
  .sel(w0),
  .i0(w1),
  .i1(w2),
  .o(w3)
 );
endmodule

module v2d2866_ve4e0df (
 input [7:0] i1,
 input [7:0] i0,
 input sel,
 output [7:0] o
);
 //-- Multiplexor de 2 a 1, 
 //-- de 8 bits
 
 reg [7:0] o;
 
 always @(*) begin
     case(sel)
         0: o = i0;
         1: o = i1;
         default: o = i0;
     endcase
 end
 
 
endmodule

module v42ebf7 #(
 parameter v71e305 = 0
) (
 input vf54559,
 input v9afc1f,
 output ve8318d
);
 localparam p1 = v71e305;
 wire w0;
 wire w2;
 wire w3;
 assign ve8318d = w0;
 assign w2 = vf54559;
 assign w3 = v9afc1f;
 v42ebf7_vb8adf8 #(
  .INI(p1)
 ) vb8adf8 (
  .q(w0),
  .d(w2),
  .load(w3)
 );
endmodule

module v42ebf7_vb8adf8 #(
 parameter INI = 0
) (
 input d,
 input load,
 output q
);
 reg q = INI;
 always @(posedge clk)
   if (load)
     q <= d;
endmodule

module v2254c0 #(
 parameter vdd0290 = 0,
 parameter vc96add = 1
) (
 input vfdbd5b,
 input vd47d8c,
 output [1:0] ve54597
);
 localparam p0 = vc96add;
 localparam p3 = vdd0290;
 wire w1;
 wire w2;
 wire [0:1] w4;
 assign w1 = vfdbd5b;
 assign w2 = vd47d8c;
 assign ve54597 = w4;
 v2254c0_vf093da #(
  .INC(p0),
  .INI(p3)
 ) vf093da (
  .clk(w1),
  .cnt(w2),
  .q(w4)
 );
endmodule

module v2254c0_vf093da #(
 parameter INI = 0,
 parameter INC = 0
) (
 input clk,
 input cnt,
 output [1:0] q
);
 //-- Número de bits del contador
 
 localparam N = 2;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (cnt)
     q <= q + INC;
endmodule

module vfc9dac (
 input [1:0] v8b19dd,
 output v3f8943,
 output v64d863
);
 wire w0;
 wire w1;
 wire [0:1] w2;
 assign v3f8943 = w0;
 assign v64d863 = w1;
 assign w2 = v8b19dd;
 vfc9dac_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .i(w2)
 );
endmodule

module vfc9dac_v9a2a06 (
 input [1:0] i,
 output o1,
 output o0
);
 assign o1 = i[1];
 assign o0 = i[0];
endmodule

module vebfed3 #(
 parameter vfb06ae = 1
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 vebfed3_v6cac2f #(
  .HZ(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

module vebfed3_v6cac2f #(
 parameter HZ = 0
) (
 input clk,
 output o
);
 //localparam HZ;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000/HZ;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la señal de overflow
 assign o = reset;
 
 
 
 
endmodule

module v1b13f6 (
 input [7:0] v3e92e2,
 input vaf813b,
 output [7:0] vcce693,
 output [7:0] vd73620
);
 wire w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:7] w3;
 assign w0 = vaf813b;
 assign vcce693 = w1;
 assign vd73620 = w2;
 assign w3 = v3e92e2;
 v1b13f6_v45bd49 v45bd49 (
  .sel(w0),
  .o1(w1),
  .o0(w2),
  .i(w3)
 );
endmodule

module v1b13f6_v45bd49 (
 input [7:0] i,
 input sel,
 output [7:0] o1,
 output [7:0] o0
);
 assign {o1,o0} = (sel) ? {i, 8'h00} : {8'h00, i};
 
endmodule

module vbc6704 (
 input [7:0] v595263,
 output vc85478,
 output v7ada3f,
 output v2c9812,
 output ve0c1b4,
 output v7c37b3,
 output v8f149e,
 output vb85197,
 output v45ab8c
);
 wire [0:7] w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 assign w0 = v595263;
 assign vc85478 = w1;
 assign v7ada3f = w2;
 assign v2c9812 = w3;
 assign ve0c1b4 = w4;
 assign v7c37b3 = w5;
 assign v8f149e = w6;
 assign vb85197 = w7;
 assign v45ab8c = w8;
 vbc6704_v9a2a06 v9a2a06 (
  .i(w0),
  .o7(w1),
  .o6(w2),
  .o5(w3),
  .o4(w4),
  .o3(w5),
  .o2(w6),
  .o1(w7),
  .o0(w8)
 );
endmodule

module vbc6704_v9a2a06 (
 input [7:0] i,
 output o7,
 output o6,
 output o5,
 output o4,
 output o3,
 output o2,
 output o1,
 output o0
);
 assign o7 = i[7];
 assign o6 = i[6];
 assign o5 = i[5];
 assign o4 = i[4];
 assign o3 = i[3];
 assign o2 = i[2];
 assign o1 = i[1];
 assign o0 = i[0];
endmodule

module v7263b9 (
 input v7fcaae,
 input v858373,
 input v21d803,
 input ve5ee9d,
 input v1b2099,
 input v15c355,
 input vf0dd0a,
 input v737e15,
 output [7:0] va191ad
);
 wire [0:7] w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 assign va191ad = w0;
 assign w1 = v7fcaae;
 assign w2 = v858373;
 assign w3 = v21d803;
 assign w4 = ve5ee9d;
 assign w5 = v1b2099;
 assign w6 = v15c355;
 assign w7 = vf0dd0a;
 assign w8 = v737e15;
 v7263b9_v9a2a06 v9a2a06 (
  .o(w0),
  .i7(w1),
  .i6(w2),
  .i5(w3),
  .i4(w4),
  .i3(w5),
  .i2(w6),
  .i1(w7),
  .i0(w8)
 );
endmodule

module v7263b9_v9a2a06 (
 input i7,
 input i6,
 input i5,
 input i4,
 input i3,
 input i2,
 input i1,
 input i0,
 output [7:0] o
);
 assign o = {i7, i6, i5, i4, i3, i2, i1, i0};
 
endmodule

module v50d67c #(
 parameter v88c17a = 115200
) (
 input v20c30d,
 input vfbc29f,
 output v9b7dfc
);
 localparam p0 = v88c17a;
 wire w1;
 wire w2;
 wire w3;
 assign w1 = v20c30d;
 assign w2 = vfbc29f;
 assign v9b7dfc = w3;
 v50d67c_v5a66e2 #(
  .BAUD(p0)
 ) v5a66e2 (
  .clk(w1),
  .ena(w2),
  .clk_out(w3)
 );
endmodule

module v50d67c_v5a66e2 #(
 parameter BAUD = 0
) (
 input clk,
 input ena,
 output clk_out
);
 //-- Constantes para obtener las velocidades estándares
 `define B115200 103  //-- 103 for TX, 104 for RX
 `define B57600  208
 `define B38400  313
 `define B19200  625
 `define B9600   1250
 `define B4800   2500
 `define B2400   5000
 `define B1200   10000
 `define B600    20000
 `define B300    40000
 
 //-- Constante para calcular los baudios
 localparam BAUDRATE = (BAUD==115200) ? `B115200 : //-- OK
                       (BAUD==57600)  ? `B57600  : //-- OK
                       (BAUD==38400)  ? `B38400  : //-- Ok
                       (BAUD==19200)  ? `B19200  : //-- OK
                       (BAUD==9600)   ? `B9600   : //-- OK
                       (BAUD==4800)   ? `B4800   : //-- OK 
                       (BAUD==2400)   ? `B2400   : //-- OK
                       (BAUD==1200)   ? `B1200   : //-- OK
                       (BAUD==600)    ? `B600    : //-- OK
                       (BAUD==300)    ? `B300    : //-- OK
                       `B115200 ;  //-- Por defecto 115200 baudios
 
 
 
 
 //-- Calcular el numero dde bits para almacenar el divisor
 localparam N = $clog2(BAUDRATE);
 
 //-- Contador para implementar el divisor
 //-- Es un contador modulo BAUDRATE
 reg [N-1:0] divcounter = 0;
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 wire ov;
 assign ov = (divcounter == BAUDRATE-1);
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = ov | (ena == 0);
 
 //-- La salida es la señal de overflow
 assign clk_out = ov;
 
 
endmodule
